// <auto-generated />
using System;
using Beauty_Works.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Beauty_Works.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250702061739_FixProductType")]
    partial class FixProductType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Beauty_Works.Models.Domain.Brand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("Desp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("SubcategoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BrandID");

                    b.HasIndex("StatusID");

                    b.HasIndex("SubcategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.ProductType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Types", (string)null);
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.Subcategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool?>("HasVariant")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductTypeID");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.Variant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ProductVariant", b =>
                {
                    b.Property<int>("ProductsID")
                        .HasColumnType("int");

                    b.Property<int>("VariantsID")
                        .HasColumnType("int");

                    b.HasKey("ProductsID", "VariantsID");

                    b.HasIndex("VariantsID");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.Product", b =>
                {
                    b.HasOne("Beauty_Works.Models.Domain.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID");

                    b.HasOne("Beauty_Works.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID");

                    b.HasOne("Beauty_Works.Models.Domain.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryID");

                    b.Navigation("Brand");

                    b.Navigation("Status");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.ProductType", b =>
                {
                    b.HasOne("Beauty_Works.Models.Domain.Category", "Category")
                        .WithMany("ProductTypes")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.Subcategory", b =>
                {
                    b.HasOne("Beauty_Works.Models.Domain.ProductType", "ProductType")
                        .WithMany("Subcategories")
                        .HasForeignKey("ProductTypeID");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ProductVariant", b =>
                {
                    b.HasOne("Beauty_Works.Models.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty_Works.Models.Domain.Variant", null)
                        .WithMany()
                        .HasForeignKey("VariantsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.Category", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.ProductType", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Beauty_Works.Models.Domain.Subcategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
